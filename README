Quadrotor Client/Server: Readme
>> Jeremy Nash <<
August 7, 2011

>> Premise:
The goal is to have any number of computers receive and send messages to the quadrotor. In fact, any device that communicates over serial should play nice with this software.

>> Quadrotor Server:
The server runs two threads: (1) SerialThread receives messages from serial (the quadrotor and broadcasts UDP packets over the WiFi connection, and (2) NetworkThread receives incoming UDP packets from the other computers and writes their messages to serial.

>> Quadrotor Client:
The client holds the all-important Quadrotor object: clients can send and receive dictionaries of values from the quadrotor.

# Pop the top message off of the message queue, in dictionary form.
d = quadrotor.pop()
{'x':452, 'y':234, 'z':687}

# Send a dictionary of values to the quadrotor.
d = {'motor_a': 420, 'motor_b':632}
quadrotor.send(d)

Clients can also register asynchronous callbacks:

def callback():
    print "Message received!"
quadrotor.register_callback(callback)

Inside Quadrotor, we maintain a thread-safe MessageQueue. A network thread continuously appends new UDP broadcast messages to the queue in a thread-safe manner; clients need not worry about locking before popping messages off of the queue.


